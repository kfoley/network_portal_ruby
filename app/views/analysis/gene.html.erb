<!--<script src="/javascripts/jquery-ui-1.8rc1/external/jquery.cookie-r6165.js"></script>-->
<script type="text/javascript">

    var div_id = "cytoscapeweb";
    var div_id2 = "cytoscapeweb2";

    var options = {
        // where you have the Cytoscape Web SWF
        swfPath: "/cytoscapeweb/swf/CytoscapeWeb",
        // where you have the Flash installer SWF
        flashInstallerPath: "/cytoscapeweb/swf/playerProductInstall",
        flashAlternateContent: "Cytoscape Web network viewer requires Flash."
    };

    var vis = new org.cytoscapeweb.Visualization(div_id, options);
    var vis_2 = new org.cytoscapeweb.Visualization(div_id2, options);

    var flag = "false";
    var lookup = new Array();
    // callback when Cytoscape Web has finished drawing
    vis.ready(function() {

        $select_toggle = 1;
        $init = 1;
        filter_expand_network(flag);


        $test = vis.addListener("select", "nodes", function(event) {
            if($select_toggle == 0) {
                return;
            } 

            $dialog = $("#note").wijdialog({
                autoOpen: true,
                title: 'Selection: Nodes',
                width: 600,
                open: handle_select(event)
            });
            
        });

        vis.addListener("click", "edges", function(event) {
            $("#note").wijdialog({
                autoOpen: false,
                title: 'Selection: Edges',
                open: handle_click(event)
            });
        });

        jQuery(function($) {
            $($test).each(function() {
                $.data(this, 'dialog', 
                    $(this).next("#note").dialog({
                        autoOpen: false,
                        width: 600
                    })
                );
            }).click(function() {
                $.data(this, 'dialog').dialog('open');
                return false;
            });
        });
    

        // START OF RIGHT CONTEXT MENU CODE - SELECT FIRST NEIGHBORS
        vis.addContextMenuItem("Select first neighbors", "nodes", 
            function (evt) {
                $select_toggle = 0;
                // Get the right-clicked node:
                var rootNode = evt.target;
        
                // Get the first neighbors of that node:
                var fNeighbors = vis.firstNeighbors([rootNode]);
                var neighborNodes = fNeighbors.neighbors;
        
                // Select the root node and its neighbors:
                vis.select([rootNode]).select(neighborNodes);

                $select_toggle = 1;
            }
        );

        // START OF FILTER CODE FOR **SHOWING** FIRST NEIGHBORS FOR AND-GATE
        vis.addContextMenuItem("AND-GATES: Show first neighbors", "nodes",
            function (evt) {
                var rootNode = evt.target;
                var logic_1 = rootNode.data["logic.combines.1"]
                var logic_2 = rootNode.data["logic.combines.2"]

	        vis.filter("nodes", function(node) {
                    // return the AND-GATE neighbors
                    if (node.data.label == rootNode.data["logic.combines.1"]) {
                        lookup[node.data.id] = "true";
                    }
                    if (node.data.label == rootNode.data["logic.combines.2"]) {
                        lookup[node.data.id] = "true";
                    }
                    return lookup[node.data.id] == "true";
	        });
            }
        );

        // START OF FILTER CODE FOR **HIDING** FIRST NEIGHBORS FOR AND-GATE
        vis.addContextMenuItem("AND-GATES: Hide first neighbors", "nodes",
            function (evt) {
                var rootNode = evt.target;
                var logic_1 = rootNode.data["logic.combines.1"];
                var logic_2 = rootNode.data["logic.combines.2"];

                vis.filter("nodes", function(node) {
                    if (node.data.label == logic_1) {
                       lookup[node.data.id] = "false";
                    }
                    if (node.data.label == logic_2) {
                       lookup[node.data.id] = "false";
                    }

                    return lookup[node.data.id] == "true";

                });
            }
        );

/******************************
        vis.addContextMenuItem("Hide first neighbors", "nodes",
            function (evt) {
                $select_toggle = 0;
                // Get the right-clicked node:
                var rootNode = evt.target;
        
                // Get the first neighbors of that node:
                var fNeighbors = vis.firstNeighbors([rootNode]);
                var neighborNodes = fNeighbors.neighbors;
                var nEdges = fNeighbors.edges;
        
                // Select the root node and its neighbors:
                vis.select([rootNode]).select(neighborNodes).select(nEdges);

                var selected = vis.selected();
                var bypass = { nodes: {}, edges: {} };
                var props = {
                              color: "f0f8ff",
                              labelFontColor: "f0f8ff",
                              borderColor: "f0f8ff",
                              selectionBorderColor: "f0f8ff"
                };
    
                for (var i=0; i < selected.length; i++) {
		    var obj = selected[i];
		    bypass[obj.group][obj.data.id] = props;
		}
		vis.visualStyleBypass(bypass);
		//vis.deselect();
                $select_toggle = 1;
            }
        );

        // START OF FILTER CODE FOR SHOWING FIRST NEIGHBORS
        vis.addContextMenuItem("Show hidden", "nodes",
            function (evt) {
                $select_toggle = 0;
		vis.visualStyleBypass(null);
                $select_toggle = 1;
            }
        );

******************************/

	$('#filter :checkbox').click(function() {
	    var $this = $(this);
	    if ($this.is(':checked')) {
                var flag = "true";
		filter_expand_network(flag);
	    } else {
                var flag = "false";
		filter_expand_network(flag);
	    }

        });

	function filter_expand_network(flag) {
	    vis.filter("nodes", function(node) {
		if (flag == "true") {
		    // return the whole network
		    lookup[node.data.id] = "true";
		    return lookup[node.data.id] == "true";
		} else {
                    // only return the core network
		    if ($init == 1) {
       			if (node.data.neighborhood == "flagella.neighbor") {
		            lookup[node.data.id] = "false";
                        } else {
		            lookup[node.data.id] = "true";
		        }
		    } else if (node.data.neighborhood == "flagella.neighbor") {
		        lookup[node.data.id] = "false";
                    } else {
		        lookup[node.data.id] = "true";
		    }
                    return lookup[node.data.id] == "true";
		}
	    });
            $init = 0;
	}

/******************************
        function update_lookup(node_id, state) {
	    //for (var i = 0; i < lookup.length; i++) {
	    //console.debug("node_id passed in = " + node_id);
	    //console.debug("state passed in = " + state);
	    //console.debug("state of lookup = " + lookup);
	    if($init == 0) {
	    for (var i in lookup) {
		//console.debug("key = " + i);
		//console.debug("value = " + lookup[i]);
	        //if(node_id == lookup[i]) {
	        if(lookup.hasOwnProperty(i)) {
		    // update state
		    //console.debug("lookup node_id = " + i);
		    //console.debug("lookup node_id state 1 = " + lookup[node_id]);
		    //console.debug("lookup      i  state 1 = " + lookup[i]);
		    lookup[i] = state;
		} else {
		    // add node and state to lookup
		    //console.debug("lookup node_id state 2 = " + lookup[node_id]);
		    lookup.push(i);
		    lookup[i] = state;
		}
	    }
	    } else { return; }

	}


        vis.filter("nodes", function(node) {
            var colorMapper = {
                                attrName: "pathway.2.1",
        			entries: [ { attrValue: "Bacterial chemotaxis", value: "red" },
                                           { attrValue: "", value: "#00ff00" },
                   		           { attrValue: "binding", value: "#0000ff" } ]
			      };
            // Set the mapper to a Visual Style;
	    var style = {
                          nodes: {
                                   color: { discreteMapper: colorMapper }
       			  }
			}
            // Set the new style to the Visualization:
            vis.visualStyle(style);            
        });
******************************/

        // EVENT HANDLER
        function handle_select(event) {

            var target = event.target;
            var table_start;
            var table_end;
            var items = {};
            clear();

            len = target.length;

            var all_genes = [];
            var all_bicl = [];
            var all_regs = [];
            var all_mots = [];
            var all_ands = [];
            for (var p in target) {
                // RENDER DIFFERENT INFO AND FORMAT FOR SINGLE ITEM VIEW
                if (len == 1) {
    	            // bicluster   
                    if(target[p].data.type== "bicluster") { 

	                svglink=target[p].data["url"];
                        svglink=svglink.replace("htmls" , "svgs").replace("html", "svgz");
		        print( "<b class=\"ex\">" + "Name : " + "</b>" + target[p].data.canonicalName + " | " +
		               "<b class=\"ex\">" + "Links : " + "</b>" + "<a target=_blank href=" + target[p].data["url"] + ">" + target[p].data.canonicalName + " page" + "</a>");
                        print("<iframe width=530 height=500 scrolling=no src=" + svglink + ">"  + "</iframe>"  );
                        print("<iframe width=0 height=0 src=" + target[p].data["url"] + ">"  + "</iframe>"  );
	            }
    
	            // gene 
                    if(target[p].data.type =="gene" ) {
                        print("<b class=\"ex\">" + "Node Type : " + "</b>"+ target[p].data.type + "<p>");
                        print("<hr>");
                        print("<ul>");
                        print("<li type=\"square\">" + "<b class=\"ex\">" + "Name : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target[p].data.label + ">" + target[p].data.label + "</a>" +  " , " + "</b>" + target[p].data["long.name"]+"</li>");
                        print("<li type=\"square\">" + "<b class=\"ex\">" + "Homologs : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/fetchLocus.cgi?locus=" + target[p].data.locusId + "&disp=3" + ">" + "MicrobesOnline" + "</a>" + "</li>" + "<p>");
                        print("<hr>");
                        print("</ul>" + "<ul>");

                        if (target[p].data.TIGRRoles) {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "TIGR Roles : " + "</b>"+ target[p].data.TIGRRoles + "</li>" + "<p>");
                        } else {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "TIGR Roles : " + "</b>"+ "No TIGR Roles asigned" + "</li>" + "</font>" + "<p>");
                        }

                        if (target[p].data.COG) {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "COG : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target[p].data.COG + ">" + target[p].data.COG + "</a>" + " at Microbes Online" +  "</li>" + "<p>");
                        } else {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "COG : " + "</b>"+ "No COG categories asigned" + "</li>" + "</font>" + "<p>");
                        }

                        if (target[p].data.GO) {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "GO Term(s) : " + "</b>" + "<a target=_blank href=" + "http://amigo.geneontology.org/cgi-bin/amigo/term_details?term=" + target[p].data.GO + ">" + target[p].data.GO + "</a>" +  "</li>" + "<p>");
                        } else {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "GO : " + "</b>"+ "No GO Terms asigned" + "</li>" + "</font>" + "<p>");
                        }
							
                        print("</ul>" + "<ul>");
                         	  
                        if (target[p].data["pathway.2"] =="NA") {
                            print("<li type=\"disc\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "KEGG Main Pathway : " + "</b>" + "No KEGG pathway assigned" + "</li>" + "</font>" + "<p>");
                        } else {
                            print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Main Pathway : " + "</b>"+ target[p].data["pathway.0"] + "</li>" + "<p>");
                            print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 1: " + "</b>"+ target[p].data["pathway.1"] + "</li>" + "<p>");
                            print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 2: " + "</b>" + "<a id=" + "pathway" + " " + "target=_blank href=" + "http://www.genome.jp/kegg-bin/show_pathway?" + target[p].data.pathway + ">" + target[p].data["pathway.2"] + "</a>" + "<div class=tooltip>" + "</li>" + "<p>");
                        }
                    }   
    
   	            // regulator 
                    if(target[p].data.type =="regulator" ) {
                        print("<b class=\"ex\">" + "Node Type : " + "</b>"+ target[p].data.type + "<p>");
                        print("<hr>");
                        print("<ul>");
                        print("<li type=\"square\">" +"<b class=\"ex\">" + "Name : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target[p].data.label + ">" + target[p].data.label + "</a>" +  " , " + "</b>" + target[p].data["long.name"] + "</li>");
                        print("<li type=\"square\">" + "<b class=\"ex\">" + "Homologs : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/fetchLocus.cgi?locus=" + target[p].data.locusId + "&disp=3" + ">" + "MicrobesOnline" + "</a>" + "</li>" + "<p>");
                        print("<hr>");
                        print("</ul>" + "<ul>");

                        if (target[p].data.TIGRRoles) {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "TIGR Roles : " + "</b>"+ target[p].data.TIGRRoles + "</li>" + "<p>");
                        } else {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "TIGR Roles : " + "</b>"+ "No TIGR Roles asigned" + "</li>" + "</font>" + "<p>");
                        }

                        if (target[p].data.COG) {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "COG : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target[p].data.COG + ">" + target[p].data.COG + "</a>" + " at Microbes Online" +  "</li>" + "<p>");
                        } else {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "COG : " + "</b>"+ "No COG categories asigned" + "</li>" + "</font>" + "<p>");
                        }

                        if (target[p].data.GO) {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "GO Term(s) : " + "</b>" + "<a target=_blank href=" + "http://amigo.geneontology.org/cgi-bin/amigo/term_details?term=" + target[p].data.GO + ">" + target[p].data.GO + "</a>" +  "</li>" + "<p>");
                        } else {
                            print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "GO : " + "</b>"+ "No GO Terms asigned" + "</li>" + "</font>" + "<p>");
                        }
							
                        print("</ul>" + "<ul>");
                        if (target[p].data["pathway.2"] =="NA") {
                            print("<li type=\"disc\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "KEGG Main Pathway : " + "</b>" + "No KEGG pathway assigned" + "</li>" + "</font>" + "<p>");
                        } else {
                            print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Main Pathway : " + "</b>"+ target[p].data["pathway.0"] + "</li>" + "<p>");
                            print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 1: " + "</b>"+ target[p].data["pathway.1"] + "</li>" + "<p>");
                            print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 2: " + "</b>" + "<a id=" + "pathway" + " " + "target=_blank href=" + "http://www.genome.jp/kegg-bin/show_pathway?" + target[p].data.pathway + ">" + target[p].data["pathway.2"] + "</a>" + "<div class=tooltip>" + "</li>" + "<p>");
                        }
							
		        print("</ul>" + "<ul>");
		        print("<li type=\"square\">" + "<b class=\"ex\">" + "Regulation : " + "</b>" + "<a target=_blank href=" + "http://regtransbase.lbl.gov/cgi-bin/regtransbase?page=geneinfo;locusid=" + target[p].data.locusId + ">" + "RegTransBase" + "</a>" + "</li>" + "<p>");
							
                    }
 
	            // motif   
                    if(target[p].data.type== "motif") { 
                        print("<b class=\"ex\">" + "Type : " + "</b>"+ target[p].data.type + "<p>");
                        print("<ul>");
                        print( "<li>" + "<b class=\"ex\">" + "Name : " + "</b>" + target[p].data.canonicalName + "</li>" + "<p>");
                        print( "<li>" + "<b class=\"ex\">" + "Consensus : " + "</b>"  + target[p].data.consensus + "</li><li>" +
                               "<b class=\"ex\">" + "E value : " + "</b>" + target[p].data["e.value"] + "</li><li>" + 
                               "<b class=\"ex\">" + "# of Sites : " + "</b>" + target[p].data["n.sites"] + "<p>" + "</li><hr>" +
                               "<a target=_blank href=" + target[p].data.imgURL + ">" + "<img align=left src=" + target[p].data.imgURL + ">" + "</a>");
                        print("</li></ul>");
                    }
                           
	            // edge   
                    if(event.group == "edges") { 
                        print("<ul>");
		        print( "<b class=\"ex\">" + "Name : " + "</b>" + target[p].data.canonicalName + "<p>");

		        if (target[p].data.interaction=="motif"){
                            print("<ul>" + "<b class=\"ex\">" + "E value : " + "</b>" + target[p].data["e.value"] + "</li><li>" + 
                                  "<b class=\"ex\">" + "# of Sites : " + "</b>" + target[p].data.nsites + "</li><li>" +
                                  "<b class=\"ex\">" + "Llr : " + "</b>" + target[p].data.llr +  "</li><li>" +
                                  "<b class=\"ex\">" + "Width : " + "</b>" + target[p].data.width + "<li></ul>" + "<p>" );
                        } else {
                            print("<ul>");
                            print("<hr>");

                            if (target[p].data.interaction =="down-regulates"){
                                print("<b class=\"ex\">"  + "Interaction : " + "</b>" + "<font color=\"green\">"+ target[p].data.interaction + "</font>" + "<p>");
                            }

                            if (target[p].data.interaction =="up-regulates"){
                                print("<b class=\"ex\">"  + "Interaction : " + "</b>" + "<font color=\"red\">"+ target[p].data.interaction + "</font>" + "<p>");
                            }

                            if (target[p].data.interaction =="combines"){
                                print("<b class=\"ex\">"  + "Interaction : " + "</b>" + "<font color=\"orange\">"+ target[p].data.interaction + "</font>" + "<p>");
                            }

                            if (target[p].data.weight){
                                print("<ul>");
                                print( "<b class=\"ex\">" + "Inferelator Weight : " + "</b>" + target[p].data.weight + "<p>");
                            }
	                }
                    }
            
	            //AND-GATE
                    if(target[p].data["Matching.Attribute"]) {
                        print("<b class=\"ex\">" + "Type : " + "</b>"+ "Logic gate" + "<p>");
                        print("<ul>");
                        print("<li>" + "<b class=\"ex\">" + "Name : " + "</b>" + target[p].data.canonicalName + "</li></ul>" + "<p>");
                    }


                } else { // multiselection part of if/else
                    //print ("Going to display some table here composed of the following items ");
                    //print("NAME = " + target[p].data.canonicalName + "; TYPE = " + target[p].data.type);
	            var bi_data = {};                    
	            var gene_data = {};
	            var reg_data = {};
	            var mot_data = {};
	            var and_data = {};

	            var bi_array = [];
	            var gene_array = [];
	            var reg_array = [];
	            var mot_array = [];
	            var and_array = [];
	  

	            // bicluster   
                    if(target[p].data.type== "bicluster") { 
	                bi_data["Name"] = target[p].data.canonicalName;
	                bi_data["Short Name"] = target[p].data["short.name"];
	                bi_data["Long Name"] = target[p].data["long.name"];
	                bi_array = bi_data;
	                all_bicl.push(bi_array);
	                items["Biclusters"] = all_bicl; //bi_array.push(bi_data);
	            }

	            // gene
                    if(target[p].data.type =="gene" ) {
	                gene_data["Name"] = target[p].data.label;
	                gene_data["Short Name"] = target[p].data["short.name"];	   
	                gene_data["Long Name"] = target[p].data["long.name"];
	                gene_data["COG"] = target[p].data.COG;
	                gene_data["TIGR"] = target[p].data.TIGRRoles;
	                gene_array = gene_data;
	                all_genes.push(gene_array);
	                items["Genes"] = all_genes; 
	            }

                    // regulator
                    if(target[p].data.type =="regulator" ) {
	                reg_data["Name"] = target[p].data.label;
	                reg_data["Short Name"] = target[p].data["short.name"];	   
	                reg_data["Long Name"] = target[p].data["long.name"];
	                reg_data["COG"] = target[p].data.COG;
	                reg_data["TIGR"] = target[p].data.TIGRRoles;
	                reg_array = reg_data;
	                all_regs.push(reg_array);
	                items["Regulators"] = all_regs; 
	            }

	            // motif   
                    if(target[p].data.type== "motif") { 
	                mot_data["Name"] = target[p].data.canonicalName;
	                mot_data["E Value"] = target[p].data["e.value"];	   
	                mot_data["Consensus"] = target[p].data.consensus;
	                mot_array = mot_data;
	                all_mots.push(mot_array);
	                items["Motifs"] = all_mots; 
	            }

	            // edge   
                    if(event.group == "edges") { 
	                // not sure if this will be added/needed; placeholder
	            }

	            //AND-GATE
                    if(target[p].data["Matching.Attribute"]) {
	                and_data["Name"] = target[p].data.canonicalName;
	                and_data["E Value"] = target[p].data["e.value"];	   
	                and_data["Consensus"] = target[p].data.consensus;
	                and_array = and_data;
	                all_ands.push(and_array);
	                items["AND-GATE"] = all_ands; 
	            }

                }

            } // for (var p in target)           
	    
	    if (len > 1) {
	        var table_text = "<table><caption id=\"network-caption\">Summary view of network </caption><colgroup id=\"cols\" span=\"9\"></colgroup>";
	        var row_start = "<tr>";
	        var row_end = "</tr>";
	        var rows = "";
	        var headers = "";

	        for(var a in items) {
	            //console.debug("type = " + a);
	            a_chunk = "<tr><th>" + a + "</th></tr>";
	            table_text += a_chunk;
	            rows = "";
	            for (var s in items[a]) {
	                rows += "<tr>";
	                headers = "";
	                for (var k in items[a][s]) {
	                    h_chunk = "<th>" + k + "</th>"; 
	                    headers += h_chunk; 
	                    if (items[a][s][k] == "" ) {
	                        v = "NA";
	                    } else {
	                        v = items[a][s][k];
	                    }
	                        r_chunk = "<td>" + v + "</td>";	         
                                rows +=  r_chunk;
	                }
	                rows += "</tr>";
	            }
	            table_text += row_start + headers + row_end;
	            table_text += rows;
	        }
	        table_text += "</table>";
	        print(table_text);

	    }

        } // handle_select

        function handle_click(event) {
            var target = event.target;
            clear();

	    // bicluster   
            if(target.data.type== "bicluster") { 
	        svglink=target.data["url"];
                svglink=svglink.replace("htmls" , "svgs").replace("html", "svgz");
		print( "<b class=\"ex\">" + "Name : " + "</b>" + target.data.canonicalName + " | " +
		       "<b class=\"ex\">" + "Links : " + "</b>" + "<a target=_blank href=" + target.data["url"] + ">" + target.data.canonicalName + " page" + "</a>");
                print("<iframe width=530 height=500 scrolling=no src=" + svglink + ">"  + "</iframe>"  );
                print("<iframe width=0 height=0 src=" + target.data["url"] + ">"  + "</iframe>"  );
	    }
    
	    // gene 
            if(target.data.type =="gene" ) {
                print("<b class=\"ex\">" + "Node Type : " + "</b>"+ target.data.type + "<p>");
                print("<hr>");
                print("<ul>");
                print("<li type=\"square\">" + "<b class=\"ex\">" + "Name : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target.data.label + ">" + target.data.label + "</a>" +  " , " + "</b>" + target.data["long.name"]+"</li>");
                print("<li type=\"square\">" + "<b class=\"ex\">" + "Homologs : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/fetchLocus.cgi?locus=" + target.data.locusId + "&disp=3" + ">" + "MicrobesOnline" + "</a>" + "</li>" + "<p>");
                print("<hr>");
                print("</ul>" + "<ul>");

                if (target.data.TIGRRoles) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "TIGR Roles : " + "</b>"+ target.data.TIGRRoles + "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "TIGR Roles : " + "</b>"+ "No TIGR Roles asigned" + "</li>" + "</font>" + "<p>");
                }

                if (target.data.COG) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "COG : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target.data.COG + ">" + target.data.COG + "</a>" + " at Microbes Online" +  "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "COG : " + "</b>"+ "No COG categories asigned" + "</li>" + "</font>" + "<p>");
                }

                if (target.data.GO) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "GO Term(s) : " + "</b>" + "<a target=_blank href=" + "http://amigo.geneontology.org/cgi-bin/amigo/term_details?term=" + target.data.GO + ">" + target.data.GO + "</a>" +  "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "GO : " + "</b>"+ "No GO Terms asigned" + "</li>" + "</font>" + "<p>");
                }
							
                print("</ul>" + "<ul>");
                         	  
                if (target.data["pathway.2"] =="NA") {
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "KEGG Main Pathway : " + "</b>" + "No KEGG pathway assigned" + "</li>" + "</font>" + "<p>");
                } else {
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Main Pathway : " + "</b>"+ target.data["pathway.0"] + "</li>" + "<p>");
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 1: " + "</b>"+ target.data["pathway.1"] + "</li>" + "<p>");
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 2: " + "</b>" + "<a id=" + "pathway" + " " + "target=_blank href=" + "http://www.genome.jp/kegg-bin/show_pathway?" + target.data.pathway + ">" + target.data["pathway.2"] + "</a>" + "<div class=tooltip>" + "</li>" + "<p>");
                }
            }   
    
   	    // regulator 
            if(target.data.type =="regulator" ) {
                print("<b class=\"ex\">" + "Node Type : " + "</b>"+ target.data.type + "<p>");
                print("<hr>");
                print("<ul>");
                print("<li type=\"square\">" +"<b class=\"ex\">" + "Name : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target.data.label + ">" + target.data.label + "</a>" +  " , " + "</b>" + target.data["long.name"] + "</li>");
                print("<li type=\"square\">" + "<b class=\"ex\">" + "Homologs : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/fetchLocus.cgi?locus=" + target.data.locusId + "&disp=3" + ">" + "MicrobesOnline" + "</a>" + "</li>" + "<p>");
                print("<hr>");
                print("</ul>" + "<ul>");

                if (target.data.TIGRRoles) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "TIGR Roles : " + "</b>"+ target.data.TIGRRoles + "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "TIGR Roles : " + "</b>"+ "No TIGR Roles asigned" + "</li>" + "</font>" + "<p>");
                }

                if (target.data.COG) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "COG : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target.data.COG + ">" + target.data.COG + "</a>" + " at Microbes Online" +  "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "COG : " + "</b>"+ "No COG categories asigned" + "</li>" + "</font>" + "<p>");
                }

                if (target.data.GO) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "GO Term(s) : " + "</b>" + "<a target=_blank href=" + "http://amigo.geneontology.org/cgi-bin/amigo/term_details?term=" + target.data.GO + ">" + target.data.GO + "</a>" +  "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "GO : " + "</b>"+ "No GO Terms asigned" + "</li>" + "</font>" + "<p>");
                }
							
                print("</ul>" + "<ul>");
                if (target.data["pathway.2"] =="NA") {
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "KEGG Main Pathway : " + "</b>" + "No KEGG pathway assigned" + "</li>" + "</font>" + "<p>");
                } else {
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Main Pathway : " + "</b>"+ target.data["pathway.0"] + "</li>" + "<p>");
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 1: " + "</b>"+ target.data["pathway.1"] + "</li>" + "<p>");
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 2: " + "</b>" + "<a id=" + "pathway" + " " + "target=_blank href=" + "http://www.genome.jp/kegg-bin/show_pathway?" + target.data.pathway + ">" + target.data["pathway.2"] + "</a>" + "<div class=tooltip>" + "</li>" + "<p>");
                }
							
		print("</ul>" + "<ul>");
		print("<li type=\"square\">" + "<b class=\"ex\">" + "Regulation : " + "</b>" + "<a target=_blank href=" + "http://regtransbase.lbl.gov/cgi-bin/regtransbase?page=geneinfo;locusid=" + target.data.locusId + ">" + "RegTransBase" + "</a>" + "</li>" + "<p>");
							
            }
 
	    // motif   
            if(target.data.type== "motif") { 
                print("<b class=\"ex\">" + "Type : " + "</b>"+ target.data.type + "<p>");
                print("<ul>");
                print( "<li>" + "<b class=\"ex\">" + "Name : " + "</b>" + target.data.canonicalName + "</li>" + "<p>");
                print( "<li>" + "<b class=\"ex\">" + "Consensus : " + "</b>"  + target.data.consensus + "</li><li>" +
                       "<b class=\"ex\">" + "E value : " + "</b>" + target.data["e.value"] + "</li><li>" + 
                       "<b class=\"ex\">" + "# of Sites : " + "</b>" + target.data["n.sites"] + "<p>" + "</li><hr>" +
                       "<a target=_blank href=" + target.data.imgURL + ">" + "<img align=left src=" + target.data.imgURL + ">" + "</a>");
                print("</li></ul>");
            }
                           
	    // edge   
            if(event.group == "edges") { 
                print("<ul>");
		print( "<b class=\"ex\">" + "Name : " + "</b>" + target.data.canonicalName + "<p>");

		if (target.data.interaction=="motif"){
                    print("<ul>" + "<b class=\"ex\">" + "E value : " + "</b>" + target.data["e.value"] + "</li><li>" + 
                          "<b class=\"ex\">" + "# of Sites : " + "</b>" + target.data.nsites + "</li><li>" +
                          "<b class=\"ex\">" + "Llr : " + "</b>" + target.data.llr +  "</li><li>" +
                          "<b class=\"ex\">" + "Width : " + "</b>" + target.data.width + "<li></ul>" + "<p>" );
                } else {
                    print("<ul>");
                    print("<hr>");

                    if (target.data.interaction =="down-regulates"){
                        print("<b class=\"ex\">"  + "Interaction : " + "</b>" + "<font color=\"green\">"+ target.data.interaction + "</font>" + "<p>");
                    }

                    if (target.data.interaction =="up-regulates"){
                        print("<b class=\"ex\">"  + "Interaction : " + "</b>" + "<font color=\"red\">"+ target.data.interaction + "</font>" + "<p>");
                    }

                    if (target.data.interaction =="combines"){
                        print("<b class=\"ex\">"  + "Interaction : " + "</b>" + "<font color=\"orange\">"+ target.data.interaction + "</font>" + "<p>");
                    }

                    if (target.data.weight){
                        print("<ul>");
                        print( "<b class=\"ex\">" + "Inferelator Weight : " + "</b>" + target.data.weight + "<p>");
                    }
	        }
            }
            
	    //AND-GATE
            if(target.data["Matching.Attribute"]) {
                print("<b class=\"ex\">" + "Type : " + "</b>"+ "Logic gate" + "<p>");
                print("<ul>");
                print("<li>" + "<b class=\"ex\">" + "Name : " + "</b>" + target.data.canonicalName + "</li></ul>" + "<p>");
            }

        }   

        function clear() {
            document.getElementById("note").innerHTML = "";

        }
    
        function print(msg) {
            document.getElementById("note").innerHTML += "<p>" + msg + "</p>";
        }
    
/////////////////////////////////////////////////
/*
    $("#side_content > .content").each(function(){
        var id = $(this).attr("id");
        $("#side_header").append('<div id="' + id + '_header" class="header"></div>');
    });

    // create tabs
    $("#side").tabs({
        show: function(event, ui){
            // show header for selected tab
            
            var panel_id = $(ui.panel).attr("id");
            $("#side_header > .header").not("#" + panel_id + "_header").hide();
            
            var header = $("#" + panel_id + "_header");
            if( header.is(":empty") ){
                header.hide();
            } else {
                header.show();
            }
            
            layout.resizeContent("east"); 
        }
    });
*/

    function capitalise(str){
        return str.substr(0, 1).toUpperCase() + str.substr(1);
    }
    
    var filter_dirty = false;
    
    function dirty_filter(){
        filter_dirty = true;
        
        $("#filter_header .rebuild").show();
        $(window).trigger("resize");
    }
    
    function rebuild_dirty_filter(){
        
        show_msg({
            type: "loading",
            target: $("#side"),
            message: "Please wait while the filters reset.",
            heading: "Resetting",
            showCorner: false
        });
        
        $.thread({
            worker: function(params){
                update_filter();
        
                hide_msg({
                    target: $("#side")
                });
            }
        });
        
        
        
    }
    
    function update_filter(){
        var attr = get_attributes();
        var parent = $("#filter");
        var header = $("#filter_header");
        var operation;
        
        var cached_elements = {};
        cached_elements.nodes = function(){
            if(cached_elements.cached_nodes == undefined){
                cached_elements.cached_nodes = vis.nodes();
            }
            return cached_elements.cached_nodes;
        }
        cached_elements.edges = function(){
            if(cached_elements.cached_edges == undefined){
                cached_elements.cached_edges = vis.edges();
            }
            return cached_elements.cached_edges;
        }
        
        
        parent.empty();
        header.empty();
        
        header.append('<div id="reset_filter">\
            <label>Reset filters</label> \
            <div id="reset_filter_button" class="ui-state-default ui-corner-all"><span class="ui-icon ui-icon-arrowreturnthick-1-w"></span></div>\
        </div>');
        
        $("#reset_filter").bind("mouseover", function(){
            $("#reset_filter_button").addClass("ui-state-hover");
        }).bind("mouseout", function(){
            $("#reset_filter_button").removeClass("ui-state-hover");
        });
        
        var tabs = $('<div id="filter_tabs"><ul></ul></div>');
        header.append(tabs);
        
        header.append('\<div class="select padded">\
        Filter such that\
        <ul>\
            <li><a href="#" operation="and">every</a></li>\
            <li><a href="#" operation="or">any</a></li>\
        </ul>\
        filter is satisfied.</div>');
        
        header.find(".select a").click(function(){
            header.find(".select a").not(this).removeClass("selected");
            $(this).addClass("selected");
            operation = $(this).attr("operation");
            
            parent.trigger("filternodes").trigger("filteredges");
            
            return false; // no changing the URL
        });
        header.find("[operation=and]").click();
        
        header.append('\<div class="rebuild padded">\
        <span class="ui-icon ui-icon-alert"></span>\
        <p>Nodes or edges have been added, removed, or had their data modified.</p>  \
        <p><small>Click here to reset the filters to bring them up to date.</small></p></div>');
        
        header.find(".rebuild").hide().add("#reset_filter").bind("click", function(){
            rebuild_dirty_filter();
            $(window).trigger("resize");
        });
        
        function append_group(group, group_name){
            tabs.find("ul").append('<li><a href="#filter_' + group_name + '">' + capitalise(group_name) + '</a></li>');
            
            var root_div = $('<div id="filter_' + group_name + '"></div>');
            parent.append(root_div);
            
            var attribute_names = [];
            for(var j in group){
                attribute_names.push(j);
            }
            
            attribute_names.sort();
            for(var j in attribute_names){
                var name = attribute_names[j];
                var attribute = group[name];
                
                var min = attribute.values[ 0 ];
                var max = attribute.values[ attribute.values.length - 1 ];
                
                if( min != max ){
                	append_attribute(attribute);
                }
            }
            
            parent.bind("filter" + group_name, function(){         
                
                vis.filter(group_name, function(ele){
                    
                    for(var j in ele.data){
                        var ele_attr_name = j;
                        var ele_attr_val = ele.data[j];
                        
                        if( attr[group_name][ele_attr_name] == undefined || attr[group_name][ele_attr_name].shown == undefined ){
                            continue; // ignore if shown not set (i.e. filter not set)
                        }
                        
                        var shown = attr[group_name][ele_attr_name].shown[ele_attr_val];
                        
                        switch(operation){
                            case "and":
                                if( !shown ){
                                    return false; // at least 1 not shown
                                }
                                break;
                                
                            case "or":
                                if( shown ){
                                    return true; // at least 1 shown
                                }
                                break;
                        }
                    }
                    
                    switch(operation){
                        case "and":
                            return true; // all shown in loop
                            
                        case "or":
                            return false; // no shown in loop
                    }
                    
                }, true);
                
                
            });
            
            function append_attribute(attribute){
            	
            	switch(attribute.name){
            	case "style":
            	case "mergeStyle":
            	case "image":
            		return;
            	}
            	
                var attribute_label = $('<label>' + attribute.name + '</label>');
                root_div.append(attribute_label);
                var div = $('<div class="attribute" attribute_name="' + attribute.name + '"></div>');
                root_div.append(div);
                
                var string_search = $('<input type="text" class="inactive string_search" value="Find a value to filter" />');
                div.append(string_search);
                
                string_search.bind("focus", function(){
                    if( $(this).hasClass("inactive") ){
                        $(this).removeClass("inactive");
                        $(this).val("");
                    }
                });
                
                var results_area = $('<div class="results_area"></div>');
                div.append(results_area);
                
                var stats_area = $('<div class="stats_area"></div>');
                results_area.append(stats_area);
                
                var slider_area = $('<div class="slider_area"></div>');
                results_area.append(slider_area);
                
                var label_min = $('<span class="slider_min"></span>');
                slider_area.append(label_min);
                
                var label_max = $('<span class="slider_max"></span>');
                slider_area.append(label_max);
                
                var slider = $('<div class="slider"></div>');
                slider_area.append(slider);
                
                var range_area = $('<div class="range_area"></div>');
                slider_area.append(range_area);
                
                var range_min = $('<input type="text" class="range_min" />');
                range_area.append(range_min);
                
                var range_max = $('<input type="text" class="range_max" />');
                range_area.append(range_max);
                
                if( attribute.type == "continuous" ){
                    use_continuous_logic();
                } else {
                    use_discrete_logic();
                }
                
                function add_slider_logic(attribute){
                    var steps = FILTER_STEPS_ON_SLIDER;
                    
                    var min, max;
                    if(attribute.type == "continuous"){
                        min = attribute.values[ 0 ];
                        max = attribute.values[ attribute.values.length - 1 ];
                    } else if( attribute.type == "discrete" ){
                        min = attribute.diff_values[ 0 ];
                        max = attribute.diff_values[ attribute.diff_values.length - 1 ];
                        
                    }
                    
                    // add shown to all, since we're now adding a slider that has all values shown
                    attr[group_name][attribute.name].shown = {};
                    for(var i in attribute.values){
                        var val = attribute.values[i];
                        
                        attr[group_name][attribute.name].shown[val] = true;
                    }
                    
                    var timeout;
                    slider.slider("destroy").empty().slider({
                        animate: "fast",
                        min: min,
                        max: max,
                        step: (max - min)/steps,
                        values: [min, max],
                        range: true,
                        start: function(event, ui){
                            // clear errors on start
                            range_min.val( ui.values[0] );
                            range_max.val( ui.values[1] );
                            
                            range_min.trigger("validate");
                            range_max.trigger("validate");
                        },
                        slide: function(event, ui){                            
                            range_min.val( ui.values[0] );
                            range_max.val( ui.values[1] );
                            
                            function set_timeout(){
                                timeout = setTimeout(function(){
                                    filter();
                                    timeout = undefined;
                                }, FILTER_DELAY_ON_SLIDER);
                            }
                            
                            if( timeout == undefined ){
                                set_timeout();
                            } else {
                                clearTimeout(timeout);
                                set_timeout();
                            }
                            
                        },
                        change: function(event, ui){                            
                        },
                        stop: function(event, ui){
                            filter();
                        }
                    });
                    
                    label_min.text( min );
                    label_max.text( max );
                    
                    range_min.val( min );
                    range_max.val( max );
                    
                    for(var i in attribute.values){
                        var val = attribute.values[i];
                        
                        for(var j = 0; j < attribute.multiplicities[val]; j++){
                            var stat = $('<div class="stat"></div>');
                            stats_area.append(stat);
                            
                            if( attribute.type == "continuous" ){
                                // val as is
                            } else if(attribute.type == "discrete") {
                                val = attribute.diff[val];  
                            }
                            
                            var percent = ((val - min) / (max - min));
                            stat.css({
                                left: ( (percent*100) + "%" )
                            });
                        }
                    }
                    
                    function update_slider_from_inputs(){
                        var values = [ parseFloat($(range_min).val()), parseFloat($(range_max).val()) ];
                        
                        for(var i in values){
                            slider.slider("values", i, values[i]);
                        }
                    }
                    
                    function valid_val(str, type){
                        if(str.match(/^(-|-){0,1}([0-9])+((\.)([0-9])+){0,1}$/)){
                            var val = parseFloat(str);
                            
                            var smin =  parseFloat( range_min.val() );
                            var smax =  parseFloat( range_max.val() );
                            
                            if( val < min || val > max ){
                                return false;
                            }
                            
                            if( type == "min" && val >= smax ){
                                return false;
                            }
                            
                            if( type == "max" && val <= smin ){
                                return false;
                            }
                            
                            return true;
                        }
                        
                        return false;
                    }
                    
                    function filter(){
                        var elements = cached_elements[group_name](); 
                        
                        // don't actually call cytoweb filter; just update the filter maps since
                        // we can not filter by just looking at ONE filter; we need to consider
                        // ALL filters
                        attr[group_name][attribute.name].shown = {};
                        for(var i in elements){
                            var ele = elements[i];
                            
                            var data = ele.data[attribute.name]
                            
                            if(attr[group_name][attribute.name].shown[data] != undefined){
                                continue;
                            }
                            
                            var val = data;
                            
                            switch(attribute.type){
                                case "continuous":
                                    val = parseFloat(val);
                                    break;
                                case "discrete":
                                    val = attribute.diff[val];
                                    break;
                            }

                            
                            var smin =  parseFloat( $(range_min).val() );
                            var smax =  parseFloat( $(range_max).val() );
                            var shown = (smin <= val && val <= smax);
                            
                            attr[group_name][attribute.name].shown[data] = shown;
                        }
                        
                        // now, let the parent filter everything based on the maps
                        parent.trigger("filter" + group_name);
                    }
                    
                    range_min.validate({
                        valid: function(str){
                            return valid_val(str, "min");
                        }
                    });
                    
                    range_max.validate({
                        valid: function(str){
                            return valid_val(str, "max");
                        }
                    });
                    
                    range_min.add(range_max).bind("valid", function(){
                        update_slider_from_inputs();
                        filter();
                    });
                }
                
                function use_continuous_logic(){
                    string_search.hide();
                    add_slider_logic(attribute);
                }
                
                function use_discrete_logic(){
                    function hide_slider(){
                        results_area.hide();
                        
                    }
                    hide_slider();
                    
                    function show_slider(){
                        if( results_area.is(":visible") ){
                            results_area.hide().fadeIn();
                        } else {
                            results_area.show();
                        }
                    }
                    
                    $(range_min).add(range_max).hide();
                    
                    function update_discrete_attribute(){   
                        attribute.diff = {};
                        attribute.diff_values = [];
                    
                        for(var i in attribute.values){
                            var val = "" + attribute.values[i];
                            var desired = "" + $(string_search).val();
                            
                            var diff = levenshtein(desired.toLowerCase(), val.toLowerCase());
                            
                            attribute.diff[val] = diff;
                            
                            if( $.inArray(diff, attribute.diff_values) < 0 ){
                                attribute.diff_values.push(diff);
                            }
                        }
                        attribute.diff_values = attribute.diff_values.sort(function(a, b){
                            if( a > b ){
                                return 1;
                            } else if( a < b ){
                                return -1;
                            } else {
                                return 0;
                            }
                        });
                        
                        attribute.desired = string_search.val();
                        
                    }
                    
                    var prev_string_search_val = string_search.val();
                    string_search.validate({
                        label: attribute_label,
                        valid: function(str){
                            if( str == "" ){
                                return false;
                            }
                        
                            update_discrete_attribute();
                            
                            if(attribute.diff_values.length > 1){
                                return true;
                            } else {
                                return false;
                            }
                        },
                        errorMessage: function(str){
                            if( str == "" ){
                                return "can not be blank to filter";
                            }
                            
                            return "needs a better matching string";
                        }
                    }).bind("valid", function(){
                        if( $(this).val() != prev_string_search_val ){
                            slider.slider("disable");
                            
                            $.thread({
                                worker: function(){
                                    add_slider_logic(attribute);
                                    
                                    if( attr[group_name][attribute.name].js_type == "boolean" ){                                        
                                        label_min.text("true");
                                        label_max.text("false");
                                    } else {
                                        label_min.text("most similar");
                                        label_max.text("most different");
                                    }
                                    
                                    slider.slider("enable");
                                    show_slider();
                                }
                            });
                            
                        }
                        
                        prev_string_search_val = $(this).val();
                    }).bind("invalid", function(){
                        hide_slider();
                        attr[group_name][attribute.name].shown = undefined; // hidden slider => filter has no effect
                        parent.trigger("filter" + group_name);
                    
                        prev_string_search_val = $(this).val();
                        
                        // this means all values are true or all values are false and filtering is
                        // completely useless, so just remove the filter
                        if( attr[group_name][attribute.name].js_type == "boolean" ){
                            attribute_label.remove();
                            div.remove();
                        }
                    });
                    
                    
                    // boolean is just a special case of discrete so just configure the ui so
                    // it's nice for users
                    if( attr[group_name][attribute.name].js_type == "boolean" ){
                        string_search.val("true").trigger("change").hide();
                    }
                    
                } // end use_discrete_logic
                
            } // end append_attribute
            
        } // end append_group
        
        
        for(var i in attr){
            var group = attr[i];
            var group_name = i;
            append_group(group, group_name);
        }
        
        //$("#filter_tabs").tabs();
        subtabs("#filter_tabs");
        
        vis.removeFilter();
        
        filter_dirty = false;
        
        $("#filter").trigger("available");
    }
/////////////////////////////////////////////////


    });

    // callback when Cytoscape Web has finished drawing
    vis_2.ready(function() {
    
        // add a listener for when nodes and edges are clicked
        vis_2.addListener("click", "nodes", function(event) {
            $dialog = $("#note2").wijdialog({
                autoOpen: true,
                title: 'Selection: Nodes',
                width: 600,
                //stack: true,
                //position: ['right','center'],
                open: handle_click(event)
            });

        });

        vis_2.addListener("click", "edges", function(event) {
            $("#note2").dialog({
                autoOpen: true,
                title: 'Selection: Edges',
                open: handle_click(event)
            });
        });

        function handle_click(event) {
            var target = event.target;
            clear();

	    // bicluster   
            if(target.data.type== "bicluster") { 
	        svglink=target.data["url"];
                svglink=svglink.replace("htmls" , "svgs").replace("html", "svgz");
		print( "<b class=\"ex\">" + "Name : " + "</b>" + target.data.canonicalName + " | " +
		       "<b class=\"ex\">" + "Links : " + "</b>" + "<a target=_blank href=" + target.data["url"] + ">" + target.data.canonicalName + " page" + "</a>");
                print("<iframe width=530 height=500 scrolling=no src=" + svglink + ">"  + "</iframe>"  );
                print("<iframe width=0 height=0 src=" + target.data["url"] + ">"  + "</iframe>"  );
	    }
    
	    // gene 
            if(target.data.type =="gene" ) {
                print("<b class=\"ex\">" + "Node Type : " + "</b>"+ target.data.type + "<p>");
                print("<hr>");
                print("<ul>");
                print("<li type=\"square\">" + "<b class=\"ex\">" + "Name : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target.data.label + ">" + target.data.label + "</a>" +  " , " + "</b>" + target.data["long.name"]+"</li>");
                print("<li type=\"square\">" + "<b class=\"ex\">" + "Homologs : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/fetchLocus.cgi?locus=" + target.data.locusId + "&disp=3" + ">" + "MicrobesOnline" + "</a>" + "</li>" + "<p>");
                print("<hr>");
                print("</ul>" + "<ul>");

                if (target.data.TIGRRoles) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "TIGR Roles : " + "</b>"+ target.data.TIGRRoles + "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "TIGR Roles : " + "</b>"+ "No TIGR Roles asigned" + "</li>" + "</font>" + "<p>");
                }

                if (target.data.COG) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "COG : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target.data.COG + ">" + target.data.COG + "</a>" + " at Microbes Online" +  "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "COG : " + "</b>"+ "No COG categories asigned" + "</li>" + "</font>" + "<p>");
                }

                if (target.data.GO) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "GO Term(s) : " + "</b>" + "<a target=_blank href=" + "http://amigo.geneontology.org/cgi-bin/amigo/term_details?term=" + target.data.GO + ">" + target.data.GO + "</a>" +  "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "GO : " + "</b>"+ "No GO Terms asigned" + "</li>" + "</font>" + "<p>");
                }
							
                print("</ul>" + "<ul>");
                         	  
                if (target.data["pathway.2"] =="NA") {
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "KEGG Main Pathway : " + "</b>" + "No KEGG pathway assigned" + "</li>" + "</font>" + "<p>");
                } else {
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Main Pathway : " + "</b>"+ target.data["pathway.0"] + "</li>" + "<p>");
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 1: " + "</b>"+ target.data["pathway.1"] + "</li>" + "<p>");
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 2: " + "</b>" + "<a id=" + "pathway" + " " + "target=_blank href=" + "http://www.genome.jp/kegg-bin/show_pathway?" + target.data.pathway + ">" + target.data["pathway.2"] + "</a>" + "<div class=tooltip>" + "</li>" + "<p>");
                }
            }   
    
   	    // regulator 
            if(target.data.type =="regulator" ) {
                print("<b class=\"ex\">" + "Node Type : " + "</b>"+ target.data.type + "<p>");
                print("<hr>");
                print("<ul>");
                print("<li type=\"square\">" +"<b class=\"ex\">" + "Name : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target.data.label + ">" + target.data.label + "</a>" +  " , " + "</b>" + target.data["long.name"] + "</li>");
                print("<li type=\"square\">" + "<b class=\"ex\">" + "Homologs : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/fetchLocus.cgi?locus=" + target.data.locusId + "&disp=3" + ">" + "MicrobesOnline" + "</a>" + "</li>" + "<p>");
                print("<hr>");
                print("</ul>" + "<ul>");

                if (target.data.TIGRRoles) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "TIGR Roles : " + "</b>"+ target.data.TIGRRoles + "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "TIGR Roles : " + "</b>"+ "No TIGR Roles asigned" + "</li>" + "</font>" + "<p>");
                }

                if (target.data.COG) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "COG : " + "</b>" + "<a target=_blank href=" + "http://microbesonline.org/cgi-bin/keywordSearch.cgi?taxId=882&keyword=" + target.data.COG + ">" + target.data.COG + "</a>" + " at Microbes Online" +  "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "COG : " + "</b>"+ "No COG categories asigned" + "</li>" + "</font>" + "<p>");
                }

                if (target.data.GO) {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "GO Term(s) : " + "</b>" + "<a target=_blank href=" + "http://amigo.geneontology.org/cgi-bin/amigo/term_details?term=" + target.data.GO + ">" + target.data.GO + "</a>" +  "</li>" + "<p>");
                } else {
                    print("<li type=\"circle\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "GO : " + "</b>"+ "No GO Terms asigned" + "</li>" + "</font>" + "<p>");
                }
							
                print("</ul>" + "<ul>");
                if (target.data["pathway.2"] =="NA") {
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "<font color=\"gray\">" + "KEGG Main Pathway : " + "</b>" + "No KEGG pathway assigned" + "</li>" + "</font>" + "<p>");
                } else {
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Main Pathway : " + "</b>"+ target.data["pathway.0"] + "</li>" + "<p>");
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 1: " + "</b>"+ target.data["pathway.1"] + "</li>" + "<p>");
                    print("<li type=\"disc\">" + "<b class=\"ex\">" + "KEGG Sub Pathway 2: " + "</b>" + "<a id=" + "pathway" + " " + "target=_blank href=" + "http://www.genome.jp/kegg-bin/show_pathway?" + target.data.pathway + ">" + target.data["pathway.2"] + "</a>" + "<div class=tooltip>" + "</li>" + "<p>");
                }
							
		print("</ul>" + "<ul>");
		print("<li type=\"square\">" + "<b class=\"ex\">" + "Regulation : " + "</b>" + "<a target=_blank href=" + "http://regtransbase.lbl.gov/cgi-bin/regtransbase?page=geneinfo;locusid=" + target.data.locusId + ">" + "RegTransBase" + "</a>" + "</li>" + "<p>");
							
            }
 
	    // motif   
            if(target.data.type== "motif") { 
                print("<b class=\"ex\">" + "Type : " + "</b>"+ target.data.type + "<p>");
                print("<ul>");
                print( "<li>" + "<b class=\"ex\">" + "Name : " + "</b>" + target.data.canonicalName + "</li>" + "<p>");
                print( "<li>" + "<b class=\"ex\">" + "Consensus : " + "</b>"  + target.data.consensus + "</li><li>" +
                       "<b class=\"ex\">" + "E value : " + "</b>" + target.data["e.value"] + "</li><li>" + 
                       "<b class=\"ex\">" + "# of Sites : " + "</b>" + target.data["n.sites"] + "<p>" + "</li><hr>" +
                       "<a target=_blank href=" + target.data.imgURL + ">" + "<img align=left src=" + target.data.imgURL + ">" + "</a>");
                print("</li></ul>");
            }
                           
	    // edge   
            if(event.group == "edges") { 
                print("<ul>");
		print( "<b class=\"ex\">" + "Name : " + "</b>" + target.data.canonicalName + "<p>");

		if (target.data.interaction=="motif"){
                    print("<ul>" + "<b class=\"ex\">" + "E value : " + "</b>" + target.data["e.value"] + "</li><li>" + 
                          "<b class=\"ex\">" + "# of Sites : " + "</b>" + target.data.nsites + "</li><li>" +
                          "<b class=\"ex\">" + "Llr : " + "</b>" + target.data.llr +  "</li><li>" +
                          "<b class=\"ex\">" + "Width : " + "</b>" + target.data.width + "<li></ul>" + "<p>" );
                } else {
                    print("<ul>");
                    print("<hr>");

                    if (target.data.interaction =="down-regulates"){
                        print("<b class=\"ex\">"  + "Interaction : " + "</b>" + "<font color=\"green\">"+ target.data.interaction + "</font>" + "<p>");
                    }

                    if (target.data.interaction =="up-regulates"){
                        print("<b class=\"ex\">"  + "Interaction : " + "</b>" + "<font color=\"red\">"+ target.data.interaction + "</font>" + "<p>");
                    }

                    if (target.data.interaction =="combines"){
                        print("<b class=\"ex\">"  + "Interaction : " + "</b>" + "<font color=\"orange\">"+ target.data.interaction + "</font>" + "<p>");
                    }

                    if (target.data.weight){
                        print("<ul>");
                        print( "<b class=\"ex\">" + "Inferelator Weight : " + "</b>" + target.data.weight + "<p>");
                    }
	        }
            }
            
	    //AND-GATE
            if(target.data["Matching.Attribute"]) {
                print("<b class=\"ex\">" + "Type : " + "</b>"+ "Logic gate" + "<p>");
                print("<ul>");
                print("<li>" + "<b class=\"ex\">" + "Name : " + "</b>" + target.data.canonicalName + "</li></ul>" + "<p>");
            }

        }   

        function clear() {
            document.getElementById("note2").innerHTML = "";

        }
    
        function print(msg) {
            document.getElementById("note2").innerHTML += "<p>" + msg + "</p>";
        }
    

    });


    $.ajax({
        //url: "/images/dvh_portal_files/flagella_inf_motif_union.xgmml",
        url: "/images/dvh_portal_files/flagella_union.xgmml",
        success: function(data){
            if (typeof data !== "string") {
                if (window.ActiveXObject) { // IE
                    data = data.xml;
                }
                else {
                    data = (new XMLSerializer()).serializeToString(data);
                }
            }
            vis.draw({
                network: data,
                layout:  'Preset'
            });
        },
	cache: true,
        error: function(){
            show_msg({
                type: "error",
                target:"#cytoscapeweb",
                message: "The file you specified could not be loaded. url=" + options.url,
                heading: "File not found",
            });
        }
    });


    $.ajax({
        url: "/images/dvh_portal_files/aminoacid_metabolism.xgmml",
        success: function(data){
            if (typeof data !== "string") {
                if (window.ActiveXObject) { // IE
                    data = data.xml;
                }
                else {
                    data = (new XMLSerializer()).serializeToString(data);
                }
            }
            vis_2.draw({
                network: data,
                layout:  'Preset'
            });
        },
	cache: true,
        error: function(){
            show_msg({
                type: "error",
                target:"#cytoscapeweb2",
                message: "The file you specified could not be loaded. url=" + options.url,
                heading: "File not found",
            });
        }
    });


</script>

<div id="page">
  <div id="content">
    <h1>Network Analysis View</h1>
    <p>Flagellar Assembly</p>
    <div id="gene-tabs">
      <ul class="tabs">
	<li><a href="#gene-1">D. Vulgaris</a></li>
	<li><a href="#gene-2">H. Salinarum</a></li>
      </ul>
      
      <!-- BEGING TABS -->
      <div id="gene-1" class="pane">
<!--
	<div class="expand_top">
	  <div class="expand_all">Expand All</div>
	</div>
-->
	<div id="summary">
	  <section class="summary">
	    <span class="title">Summary:</span>
	    <span class="descr-info">Some definition/summary info here.  We can grab from KEGG</span>
	  </section>
	  <br />
	  <section class="related-networks">
	    <span class="title">Related Networks:</span>
	    <table id="related"> 
	      <caption></caption>
	      <colgroup id="cols" span="4"></colgroup>
	      <tr>
		<th>Name</th>
		<th># of Biclusters</th>
		<th># of Regulators</th>
		<th>p-value</th>
	      </tr>
	      <tr>
		<td>Bacterial Chemotaxis</td>
		<td>3</td>
		<td>6</td>
		<td>0.221</td>
	      </tr>
	    </table>
	  </section>
	  <br />
	  <section class="stat-table">
	    <span class="title">Enrichment table of stats:</span>
	    <div id="network-summary">
	      <table id="enrich">
		<caption>Functional enrichment of Flagellar Assembly pathway in D. vulgaris regulatory network</caption>
		<colgroup id="cols" span="5"></colgroup>	      
		<tr>
		  <th>Bicluster</th>
		  <th>p-value</th>
		  <th>pathway 2</th>
		  <th>pathway 1</th>
		  <th>pathway 0</th>
		</tr>
		<tr>
		  <td>bicluster_0286</td>
		  <td>6.498911e-15</td>
		  <td>Flagellar assembly</td>
		  <td>Cell Motility</td>
		  <td>Cellular Processes</td>
		</tr> 
		<tr>
		  <td>bicluster_0184</td>
		  <td>1.353184e-27</td>
		  <td>Flagellar assembly</td>
		  <td>Cell Motility</td>
		  <td>Cellular Processes</td>
		</tr> 
		<tr>
		  <td>bicluster_0125</td>
		  <td>1.078040e-20</td>
		  <td>Flagellar assembly</td>
		  <td>Cell Motility</td>
		  <td>Cellular Processes</td>
		</tr>
		<tr>
		  <td>bicluster_0022</td>
		  <td>6.186446e-13</td>
		  <td>Flagellar assembly</td>
		  <td>Cell Motility</td>
		  <td>Cellular Processes</td>
		</tr> 
	      </table>
	    </div>
	  </section>
	</div>
	<br/>
	<div id="network">
<!--
	  <span id="network-list" class="collapsed network-title expand_heading"><span id="item-title">Network:</span></span>
	  <div id="network-list" class="toggle_container">
-->
	  <span id="network-list" class="network-title expand_heading"><span class="title">Network:</span></span>
	  <div id="network-list">
	    <div id="network-tabs">
	      <ul id="test" class="tabs">
		<li><a href="#tab-5">Overview Network</a></li>
		<li><a href="#tab-6">Bicluster 0286</a></li>
		<li><a href="#tab-7">Bicluster 0184</a></li>
		<li><a href="#tab-8">Bicluster 0125</a></li>
		<li><a href="#tab-9">Bicluster 0022</a></li>
	      </ul>
	      <div id="tab-5" class="pane">
<!--
		<div id="network-summary">
		  <table> 
		    <caption id="network-caption">Functional enrichment of Flagellar Assembly pathway in D. vulgaris regulatory network </caption>
		    <colgroup id="cols" span="5"></colgroup>
		    <tr>
		      <th>bicluster</th>
		      <th>Bonferroni cor. pvalue</th>
		      <th> KEGG sub pathway 1</th>
		      <th> KEGG sub pathway 2</th>
		      <th> KEGG main pathway</th>
		    </tr> 
		    <tr>
		      <td>bicluster_0286</td>
		      <td>6.498911e-15	</td>
		      <td>Flagellar assembly	</td>
		      <td>Cell Motility	</td>
		      <td>Cellular Processes</td>
		    </tr> 
		    <tr>
		      <td>bicluster_0184</td>
		      <td>	1.353184e-27</td>
		      <td>	Flagellar assembly</td>
		      <td>	Cell Motility</td>
		      <td>	Cellular Processes</td>
		    </tr> 
		    <tr>
		      <td>bicluster_0125</td>
		      <td>	1.078040e-20</td>
		      <td>	Flagellar assembly</td>
		      <td>	Cell Motility</td>
		      <td>	Cellular Processes</td>
		    </tr>
		    <tr>
		      <td>bicluster_0022</td>
		      <td>	6.186446e-13</td>
		      <td>	Flagellar assembly</td>
		      <td>	Cell Motility</td>
		      <td>	Cellular Processes</td>
		    </tr> 
		  </table> 
		</div> 
-->
		<div id="cytoscapeweb">

		</div>
		<div id="note">
		</div>
		<div id="note">
		</div>
		<div id="note">
		</div>
		<div id="note">
		</div>
		<div id="note">
		</div>
		<div id="note">
		</div>
		<br />
		<form id="filter">
		  <span class="title">Filters:</span>
		  <div id="filter-section">
		  <div id="filter-1">
		    <label><input type="checkbox" name="expand_network">Expand Network</label>
		  </div>
		  <div id="filter-2">
		    <label for="residual">bicluster residual:</label>
		    <input type="text" id="residual" />
		    <div id="slider-residual">
		    </div>
		    <br /> 
		    <!--<input type="submit" value="Filter" button id="filter_residual" />-->
		    <input type="button" value="Reset" button id="reset_residual" />
		    <!--<button id="filter_residual">Filter</button>
		    <button id="reset_residual">Reset</button>-->
		    <hr> 
		    <label for="weight">edge weight:</label>
		    <input type="text" id="weight" />
		    <div id="slider-weight">
		    </div>
		    <br /> 
		    <!--<input type="submit" value="Filter" button id="filter_weight" />-->
		    <input type="button" value="Reset" button id="reset_weight" /> 
		    <hr> 
		    <div id="buttonpanel" class="buttonpanel"> 
		      <label >Hide </label>
		      <br /> 
		      <input type="button" value= "Bicluster" buttonset id="hide_bicluster" />
		      <input type="button" value= "AND-Gate" buttonset id="hide_andgate" />
		      <input type="button" value= "Regulator" buttonset id="hide_regulator" />
		      <input type="button" value= "Genes" buttonset id="hide_genes" />
		      <input type="button" value= "Reset" buttonset id="reset_all" />
		    </div>
		  </div>
		  </div>
		</form>
<!--
		<div id="side">
		  <ul>
		    <li><a id="filter_link" href="#filter"><span>Filter</span></a></li>
		  </ul>
		  <div id="side_header" class="ui-layout-header">
		  </div>
		  <div id="side_content" class="ui-layout-content">
		    <div id="filter"></div>
		  </div>
		</div>
-->
<!--
		<div id="filter">
		  <div id="filter_nodes">
		    <label>id</label>
		    <div class="attribute">
		      <input type="text">
		      <div class="results_area">
			<div class="stats_area"></div>
			<div class="slider_area">
			  <span class="slider_min"></span>
			  <span class="slider_max"></span>
			  <div class="slider"></div>
			  <div class="range_area"></div>
			</div>
		      </div>
		  </div>
		  <div id="filter_edges">
		    
		  </div>
		</div>
-->
	      </div>
	      <div id="tab-6" class="pane">
		<div id="network-summary">
		  <table> 
		    <caption id="network-caption">Functional enrichment of Flagellar Assembly pathway in D. vulgaris regulatory network </caption>
		    <colgroup id="cols" span="5"></colgroup>
		    <tr>
		      <th>bicluster</th>
		      <th>Bonferroni cor. pvalue</th>
		      <th> KEGG sub pathway 1</th>
		      <th> KEGG sub pathway 2</th>
		      <th> KEGG main pathway</th>
		    </tr> 
		    <tr>
		      <td>bicluster_0286</td>
		      <td>6.498911e-15	</td>
		      <td>Flagellar assembly	</td>
		      <td>Cell Motility	</td>
		      <td>Cellular Processes</td>
		    </tr> 
		    <tr>
		      <td>bicluster_0184</td>
		      <td>	1.353184e-27</td>
		      <td>	Flagellar assembly</td>
		      <td>	Cell Motility</td>
		      <td>	Cellular Processes</td>
		    </tr> 
		    <tr>
		      <td>bicluster_0125</td>
		      <td>	1.078040e-20</td>
		      <td>	Flagellar assembly</td>
		      <td>	Cell Motility</td>
		      <td>	Cellular Processes</td>
		    </tr>
		    <tr>
		      <td>bicluster_0022</td>
		      <td>	6.186446e-13</td>
		      <td>	Flagellar assembly</td>
		      <td>	Cell Motility</td>
		      <td>	Cellular Processes</td>
		    </tr> 
		  </table> 
		</div> 
		<div id="cytoscapeweb2">

		</div>
		<div id="note2">
		</div>
		<div id="note2">
		</div>
		<div id="note2">
		</div>
		<div id="note2">
		</div>
		<div id="note2">
		</div>
		<div id="note2">
		</div>

<!--stuff for tab 6-->
	      </div>
	      <div id="tab-7" class="pane">
		stuff for bicluster 0184
	      </div>
	      <div id="tab-8" class="pane">
		stuff for bicluster 0125
	      </div>
	      <div id="tab-9" class="pane">
		stuff for bicluster 0022
	      </div>
	    </div>
	  </div>
	</div><!-- #network -->

      </div><!-- END GENE -->

      <div id="gene-2" class="pane">      
	testing
      </div><!-- END GENE -->

    </div><!-- END GENE-TABS -->

    <p><a href="/search_form">new search</a>&nbsp;<a href="/">home</a></p>

  </div><!-- End #content -->
</div><!-- End #page -->
